<?php 
namespace reks\cli\commands;

use Symfony\Component\Console\Input\InputArgument,
Symfony\Component\Console\Input\InputOption,
Symfony\Component\Console,
Doctrine\ORM\Tools\Console\MetadataFilter,
\reks\core\ReksData;

/**
 * Command to create a new application
 */
class CreateApp extends ACommand{
	
	
	
	/**
	 * @see Console\Command\Command
	 */
	protected function configure(){
		$this
		->setName('reks:app:create')
		->setDescription('Creates a new application')
		->setDefinition(
				array(
						new InputOption(
								'target-dir', null, InputOption::VALUE_REQUIRED,
								'Where should the application folder be created?',
								'.'
						),
						new InputOption(
								'doctrine', null, InputOption::VALUE_NONE,
								'Generate doctrine cache folders?'
						),
						new InputArgument(
								'app-name', InputArgument::REQUIRED,
								'The application name.'
						),
				)
		)
		->setHelp(<<<EOT
Creates a new REKS application
EOT
		);
	}
	
	

	/**
	 * @see Console\Command\Command
	 */
	protected function execute(Console\Input\InputInterface $input, Console\Output\OutputInterface $output){
		parent::execute($input, $output);
		
		$appName = $input->getArgument('app-name');
		if (!preg_match("/^[a-zA-Z_]+$/", $appName)){
			throw new \InvalidArgumentException(
					sprintf("The application name \"%s\" is not allowed. Allowed characters is A-Z , a-z and underscore.", $appName));
		}
		
		
		$destPath = $input->getOption('target-dir');
		if (!$destPath || !is_dir($destPath)){
			throw new \InvalidArgumentException(
					sprintf("The directory %s does not exist. Please create the directory before proceeding.", $destPath));
		}
		if(substr($destPath, -1) == DIRECTORY_SEPARATOR)$destPath = substr($desPath, 0, -1);		
		if (!file_exists($destPath)){
			throw new \InvalidArgumentException("$destPath is does not exist, please user another target directory or create it!");
		}
		if (!is_writable($destPath)){
			throw new \InvalidArgumentException("$destPath is not writable!");
		}
		
		$destPath = $destPath . DIRECTORY_SEPARATOR . $appName;
		$input->setOption('target-dir', $destPath);
		
		
		
		if (!file_exists($destPath))mkdir($destPath);
		
		
		$this->createTree($this->getDirStructure($input), $input, $output, $destPath);
		$output->writeln("Finished. Lookup config.php and start creating your controllers, models and views. Good luck!");
	}
	
	
	
	/**
	 * Recursive method to create a folder tree based on a array.
	 * 
	 * @param array $tree
	 * @param unknown_type $input
	 * @param unknown_type $oPath
	 */
	public function createTree(array $tree, $input, $output, $oPath){
		foreach($tree as $file => $handler){
			
			if (is_array($handler)){
				$path = $this->createDir($file, $oPath, $output);
				$this->createTree($handler, $input, $output, $path);
			}elseif(is_string($handler)){
				$path = $this->createDir($handler, $oPath, $output);
			}elseif(is_callable($handler)){
				$path = $oPath . DIRECTORY_SEPARATOR . $file;
				$content = $handler($input);
				if (!file_exists($path)){
					$output->writeln("Creating file ($path) with contents ".PHP_EOL."----------".PHP_EOL.substr($content, 0, 100).PHP_EOL."----------".PHP_EOL.".");
					file_put_contents($path, $content);
				}else{
					$output->writeln("Skipping creation of file $path.");
				}
			}
				
		}
	}
	
	
	public function createDir($handler, $oPath, $output){
		
		$requireWrite = false;
		
		if(strstr($handler, '[w]')){
			$requireWrite = true;
			$handler = str_replace('[w]','',$handler);
		}
		
		$path = $oPath . DIRECTORY_SEPARATOR . $handler;
		
		if (!file_exists($path)){
			mkdir($path);
			$output->writeln("Created folder $path. " . ($requireWrite && !is_writable($path) ? 'Warning: Folder is not writable! Please make it writable.' : ''));
			touch($path . DIRECTORY_SEPARATOR . 'README.md');
		}else{
			$output->writeln("Skipping folder creation of $path. It already exist.");
		}
		return $path;
	}
	
	
	
	/**
	 * Infrastructure of application.
	 * @param unknown_type $input
	 * @return string|multitype:string NULL multitype:string NULL
	 */
	public function getDirStructure($input){
		
		$text = function($string){
			return str_replace("\t", "",$string);
		};
		$php = function($code) use($text){
			return '<?php /* File generated by CreateApp at '.date('y/m/d').' */ ' . $text($code); // Remove TABS!
		};
		
		$files = array(
				'cache[w]',
				'logs[w]',
				'public' => array(
							'cache[w]',
							'js',
							'css',
							'img',
							'libs',
							'index.php' => function($input) use ($php){
								return file_get_contents(ReksData::getReksPath() . '/res/app/index.php');
							}
						),
				'model',
				'view' => array(
							'index.php' => function($input){
								return file_get_contents(ReksData::getReksPath() . '/res/app/view.php');
							}
						),
				'controller' => array(
							'Main.php' => function($input){
								return file_get_contents(ReksData::getReksPath() . '/res/app/controller.php');
							}
						),
				'app-data.php' => function($input) use($php){
					
					return $php("\$thisDir = dirname(__FILE__); 
							\$appData = array(
									'app_name' => '{$input->getArgument('app-name')}', 
									'app_path' => \$thisDir,
									'base_reks' => '".ReksData::getReksPath()."',
									'public_path' => \$thisDir . '".(DIRECTORY_SEPARATOR . 'public')."'
							); ");
					
				},
				'config.php' => function($input){
					return file_get_contents(ReksData::getReksPath() . '/res/app/config.php');
				},
				'.gitignore' => function ($input) use($text){
					return $text("
							# REKS
							cache/*.php
							
							
							
							# Eclipse
							*.pydevproject
							.project
							.metadata
							bin/**
							tmp/**
							tmp/**/*
							*.tmp
							*.bak
							*.swp
							*~.nib
							local.properties
							.classpath
							.settings/
							.loadpath
							
							# External tool builders
							.externalToolBuilders/
							
							# Locally stored 'Eclipse launch configurations'
							*.launch
							
							# CDT-specific
							.cproject
							
							# PDT-specific
							.buildpath
							
							# Netbeans
							nbproject/private/
							build/
							nbbuild/
							dist/
							nbdist/
							nbactions.xml
							nb-configuration.xml
							
							
							");
				}
				
		);
		
		
		// If doctrine
		if ($input->getOption('doctrine')){
			$files[] = 'proxies';
		}
		
		
		
		return $files;
	}
	




}